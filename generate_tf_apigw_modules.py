import sys, os, json, subprocess, shutil

f = open(sys.argv[1], "r")
config = json.loads(f.read())
locals().update(config)

sources_folder = api_gw_folder + sources_folder
generated_folder_path = api_gw_folder + generated_folder

warning = '''#
# DO NOT EDIT THIS FILE MANUALLY
# EDIT THE FILE IN SOURCE FOLDER
#
'''

def append_module(module_name):
     return '''module "{module_name}" {{
  source = "./{generated_folder}{module_name}"
  name = "{module_name}"
  vpc_link_id = {vpc_link_id}
  authorizer_arns = {authorizer_arns}
}}
'''.format(module_name=module_name, generated_folder=generated_folder, vpc_link_id=vpc_link_id, authorizer_arns=json.dumps(authorizer_arns))

try:
     print("------------------------------------")
     print("START module creation")
     print("------------------------------------")
     
     # recreate generated folder
     if (os.path.isdir(generated_folder_path)):  
          shutil.rmtree(generated_folder_path)
     os.mkdir(generated_folder_path)

     ms = open(api_gw_folder + generated_modules_file_name + ".tf", "w")
     ms.write(warning)

     for filename in os.listdir(sources_folder):
          # generate tf file
          from subprocess import check_output
          tfcontent = check_output(["python", "generate_tf_apigw.py",  sources_folder+"/"+filename])
          
          module_name = filename.replace(".json","")
          path = generated_folder_path + module_name

          # create module directory if does not exist
          if not (os.path.isdir(path)):               
               os.mkdir(path)
          
          # create or override tf file
          f = open(path+"/main.tf", "w")
          f.write(tfcontent)
          f.close()

          ms.write(append_module(module_name))

          print(path)
     ms.close()
     print("------------------------------------")
     print(api_gw_folder + generated_modules_file_name + ".tf file updated!")
     print("------------------------------------")
except OSError as e:
     print(e)