import sys, json, re

f = open(sys.argv[1], "r")
js = json.loads(f.read())
integrations = []

def aws_api_gateway_resource(rsc):
    return '''resource "aws_api_gateway_resource" "{name}" {{
  rest_api_id = {rest_api_id}
  parent_id   = {parent_id}
  path_part   = "{path}"
}}'''.format(**rsc)

def aws_api_gateway_method(method):
    method["authorization_scopes"] = json.dumps(method["authorization_scopes"])
    method["method_request_parameters"] = method["method_request_parameters"] if ("method_request_parameters" in method) else {}
    if (method["rsc_path"] == "{proxy+}"):
      method["method_request_parameters"]["method.request.path.proxy"] = True
      method["method_request_parameters"] = json.dumps(method["method_request_parameters"]).replace(":","=")
    return '''resource "aws_api_gateway_method" "{rsc_name}-{http_method_name}" {{
  rest_api_id   = {rsc_rest_api_id}
  resource_id   = {rsc_id}
  http_method   = "{http_method}"
  authorization = "COGNITO_USER_POOLS"
  authorizer_id = {rsc_authorizer_id}
  authorization_scopes = {authorization_scopes}
  request_parameters = {method_request_parameters}
}}'''.format(**method)

def aws_api_gateway_method_settings(method):
    return '''resource "aws_api_gateway_method_settings" "{rsc_name}-{http_method_name}" {{
  rest_api_id  = {rsc_rest_api_id}
  stage_name  = "{rsc_stage_name}"
  method_path = "*/*"
  settings {{
    metrics_enabled = true
    logging_level   = "INFO"
    data_trace_enabled = true
  }}
  depends_on = ["aws_api_gateway_deployment.deployment"]
}}'''.format(**method)

def aws_api_gateway_integration(method):
    method["uri"] = method["uri"].replace("${","$${")
    integrations.append("aws_api_gateway_integration."+method["rsc_name"]+"-"+method["http_method_name"])
    method["integration_request_parameters"] = method["integration_request_parameters"] if ("integration_request_parameters" in method) else {}
    if (method["rsc_path"] == "{proxy+}"):
      method["integration_request_parameters"]["integration.request.path.proxy"] = "method.request.path.proxy"
      method["integration_request_parameters"] = json.dumps(method["integration_request_parameters"]).replace(":","=")
    return '''resource "aws_api_gateway_integration" "{rsc_name}-{http_method_name}" {{
  rest_api_id = {rsc_rest_api_id}
  resource_id = {rsc_id}
  http_method = "{http_method}"
  type        = "HTTP_PROXY"
  connection_type = "VPC_LINK"
  connection_id   = var.vpc_link_id
  integration_http_method = "ANY"
  uri         = "{uri}"
  request_parameters = {integration_request_parameters}
  depends_on = ["aws_api_gateway_method.{rsc_name}-{http_method_name}"]
}}'''.format(**method)

def aws_api_gateway_deployment(integrations):
  return '''resource "aws_api_gateway_deployment" "deployment" {{
  depends_on  = {integrations}
  rest_api_id = aws_api_gateway_rest_api.gra.id
  stage_name = "env"
  stage_description = filesha1("${{path.module}}/main.tf")
  description = filesha1("${{path.module}}/main.tf")
  variables = {{
    "integration_dns" = "{dns}"
  }}
}}'''.format(integrations=json.dumps(integrations), dns=js["integration_dns"])

def resources(rscs):
    s = ""
    for rsc in rscs:
        rsc["rest_api_id"] = "aws_api_gateway_rest_api.gra.id"
        rsc["authorizer_id"] = "aws_api_gateway_authorizer.authorizer.id"
        rsc["vpc_link_id"] = "var.vpc_link_id"
        rsc["stage_name"] = "env"
        rsc["name"] = re.sub(r'\W+', '', rsc["path"])
        s += resource(rsc)
    return s

def resource(rsc):
    s = aws_api_gateway_resource(rsc) + "\n"
    for method in rsc["methods"]:
        method["rsc_name"] = rsc["name"]
        method["rsc_path"] = rsc["path"]
        method["rsc_rest_api_id"] = rsc["rest_api_id"]
        method["rsc_id"] = "aws_api_gateway_resource."+rsc["name"]+".id"
        method["rsc_authorizer_id"] = rsc["authorizer_id"]
        method["rsc_stage_name"] = rsc["stage_name"]        
        method["http_method_name"] = re.sub(r'\W+', '', method["http_method"]).lower()
    s += methods(rsc["methods"])
    if ("resources" in rsc):
        for rsc in rsc["resources"]:
            rsc["parent_id"] = "aws_api_gateway_resource."+rsc["name"]+".id"
        s += resources(rsc["resources"])
    return s

def methods(methods):
    s = ""
    for method in methods:
        method["http_method_name"] = re.sub(r'\W+', '', method["http_method"]).lower()
        s += aws_api_gateway_method(method) + "\n"
        s += aws_api_gateway_method_settings(method) + "\n"
        s += aws_api_gateway_integration(method) + "\n"
    return s

result = '''#
# DO NOT EDIT THIS FILE MANUALLY
# EDIT THE FILE IN SOURCE FOLDER
#

variable name {}
variable vpc_link_id {}
variable authorizer_arns {}

resource "aws_api_gateway_rest_api" "gra" {
  name        = var.name
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

resource "aws_api_gateway_authorizer" "authorizer" {
  name          = "cognito-auth"
  type          = "COGNITO_USER_POOLS"
  rest_api_id   = aws_api_gateway_rest_api.gra.id
  provider_arns = var.authorizer_arns
}
'''

for method in js["methods"]:
    method["rsc_name"] = "root"
    method["rsc_path"] = "root"
    method["rsc_rest_api_id"] = "aws_api_gateway_rest_api.gra.id"
    method["rsc_id"] = "aws_api_gateway_rest_api.gra.root_resource_id"
    method["rsc_authorizer_id"] = "aws_api_gateway_authorizer.authorizer.id"
    method["rsc_stage_name"] = "env"
result += methods(js["methods"])

for rsc in js["resources"]:
    rsc["parent_id"] = "aws_api_gateway_rest_api.gra.root_resource_id"
result += resources(js["resources"])

result += aws_api_gateway_deployment(integrations)

print(result)